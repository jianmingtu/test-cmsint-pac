# This is the main workflow that creates a new image and push to Openshift image stream which in turn triggers the deployment

name: Main - Build Image and Push to Openshift Registry for Dev Deployment

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      app1:
        description: 'App Name (cmsint-pac-extractor)'
        required: true
        default: 'cmsint-pac-extractor'
      app2:
        description: 'App Name (cmsint-pac-transformer)'
        required: true
        default: 'cmsint-pac-transformer'
      app3:
        description: 'App Name (cmsint-pac-loader)'
        required: true
        default: 'cmsint-pac-loader'
      env:
        type: choice
        description: Image Target environment
        options: 
        - dev
        required: true
        default: 'dev'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-push-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    environment: ${{ github.event.inputs.env }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Git Checkout
        uses: actions/checkout@v3
      
      # Get the version number which is prefixed with the Github release branches in format release/{version}
      - name: Get Release Version
        run: |
          branch=${GITHUB_REF##*/}
          version=$(echo $branch | cut -d "/" -f2-)
          echo "releaseVersion=$version" >> $GITHUB_ENV
      
      # Get Git latest short Sha# from the release branch used. This Sha# will be used in image tagging as well as DC Pod labelling.
      - name: Get git commit short sha
        id: sha
        run: |
          shortSha=$(echo $(git rev-parse --short HEAD) | cut -c1-7)
          echo "gitsha=$shortSha" >> $GITHUB_ENV
      
      # Prints vital release paramters used
      - name: Print Release Variables
        run: |
          echo "Release Application 1: ${{ github.event.inputs.app1 }}"
          echo "Release Application 2: ${{ github.event.inputs.app2 }}"
          echo "Release Application 3: ${{ github.event.inputs.app3 }}"
          echo "Release Environment: ${{ github.event.inputs.env }}"
          echo "Release Version: ${{ env.releaseVersion }}"
          echo "Release Git Sha: ${{env.gitsha}}"

      # Set up JDK build environment
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
        
      - name: Maven Verify
        run: mvn -ntp clean verify
      
      # - name: Maven Spotless Check
      #   run: mvn -ntp spotless:check

      #Build image jag-cmsint-pac-extractor
      - name: Build image jag-cmsint-pac-extractor
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          APP: ${{github.event.inputs.app1}}
          CONTEXT: .
        run: |
          docker build -t ${APP}:${{env.gitsha}} --build-arg MVN_PROFILE=${APP} ${CONTEXT}

      #Build image jag-cmsint-pac-transformer
      - name: Build image jag-cmsint-pac-transformer
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          APP: ${{github.event.inputs.app2}}
          CONTEXT: .
        run: |
          docker build -t ${APP}:${{env.gitsha}} --build-arg MVN_PROFILE=${APP} ${CONTEXT}
      
      #Build image jag-cmsint-pac-loader
      - name: Build image jag-cmsint-pac-loader
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
          APP: ${{github.event.inputs.app3}}
          CONTEXT: .
        run: |
          docker build -t ${APP}:${{env.gitsha}} --build-arg MVN_PROFILE=${APP} ${CONTEXT}

      #Login to OpenShift Container Repository - Kamloops (OC PROD)
      - name: Login to OpenShift Container Repository - Kamloops (OC PROD)
        uses: docker/login-action@v2
        with:
          registry: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}
          username: ${{secrets.OPENSHIFT_SA_USERNAME}}
          password: ${{secrets.OPENSHIFT_SA_PASSWORD}}

      #Push image jag-cmsint-pac-extractor to OpenShift Image stream - Kamloops (OC Prod)
      - name: Push Image jag-cmsint-pac-extractor to Openshift Image Stream - Kamloops (OC Prod)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app1}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app1}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}

      #Push image jag-cmsint-pac-transformer to OpenShift Image stream - Kamloops (OC Prod)
      - name: Push Image jag-cmsint-pac-transformer to Openshift Image Stream - Kamloops (OC Prod)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app2}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app2}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}
      
      #Push image jag-cmsint-pac-loader to OpenShift Image stream - Kamloops (OC Prod)
      - name: Push Image jag-cmsint-pac-loader to Openshift Image Stream - Kamloops (OC Prod)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app3}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app3}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}

      #Login to OpenShift Container Repository - Calgary (OC DR)
      - name: Login to OpenShift Container Repository - Calgary (OC DR)
        uses: docker/login-action@v2
        with:
          registry: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}
          username: ${{secrets.OPENSHIFT_SA_USERNAME}}
          password: ${{secrets.OPENSHIFT_SA_PASSWORD_DR}}

      #Push image jag-cmsint-pac-extractor to OpenShift Image stream - Calgary (OC DR)
      - name: Push Image jag-cmsint-pac-extractor to Openshift Image Stream - Calgary (OC DR)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app1}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app1}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}

      #Push image jag-cmsint-pac-transformer to OpenShift Image stream - Calgary (OC DR)
      - name: Push Image jag-cmsint-pac-transformer to Openshift Image Stream - Calgary (OC DR)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app2}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app2}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}
      
      #Push image jag-cmsint-pac-loader to OpenShift Image stream - Calgary (OC DR)
      - name: Push Image jag-cmsint-pac-loader to Openshift Image Stream - Calgary (OC DR)
        env:
          IMAGE: ${{secrets.OPENSHIFT_EXTERNAL_REPOSITORY_DR}}/${{secrets.OPENSHIFT_TOOLS_NAMESPACE}}/${{github.event.inputs.app3}}:${{secrets.OPENSHIFT_ENV_TAG}}
        run: |
          docker tag ${{github.event.inputs.app3}}:${{env.gitsha}} ${IMAGE}
          docker push ${IMAGE}

      #Login to Openshift using OC SA and Token of respective env. for Pod labelling - Kamloops (OC PROD)
      - name: Authenticate OC Env Specific SA - Kamloops (OC PROD)
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_NAMESPACE: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
          OPENSHIFT_USER: ${{secrets.OPENSHIFT_SA_Env_DEPLOYER_NAME}}
        with:
          openshift_server_url: ${{secrets.OPENSHIFT_SERVER_URL}}
          openshift_token: ${{secrets.OPENSHIFT_SA_ENV_DEPLOYER_TOKEN}}
          namespace: ${OPENSHIFT_NAMESPACE}

      # Labels the deployment config of the application jag-cmsint-pac-extractor with release version number to spin up the pods labelled in same version - Kamloops (OC PROD)
      - name: Labelling DC of jag-cmsint-pac-extractor to release version - Kamloops (OC PROD)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app1}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'
      
      # Wait to DC rollout of jag-cmsint-pac-extractor to get completed before proceeding next stage - Kamloops (OC PROD)
      - name: Wait for DC rollout of jag-cmsint-pac-extractor - Kamloops (OC PROD)
        env:
          appName: ${{github.event.inputs.app1}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch

      # Labels the deployment config of the application jag-cmsint-transformer with release version number to spin up the pods labelled in same version - Kamloops (OC PROD)
      - name: Labelling DC of jag-cmsint-transformer to release version - Kamloops (OC PROD)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app2}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'

      # Wait to DC rollout of jag-cmsint-transformer to get completed before proceeding next stage - Kamloops (OC PROD)
      - name: Wait for DC rollout of jag-cmsint-transformer - Kamloops (OC PROD)
        env:
          appName: ${{github.event.inputs.app2}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
      
      # Labels the deployment config of the application jag-cmsint-loader with release version number to spin up the pods labelled in same version - Kamloops (OC PROD)
      - name: Labelling DC of jag-cmsint-loader to release version - Kamloops (OC PROD)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app3}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'

      # Wait to DC rollout of jag-cmsint-loader to get completed before proceeding next stage - Kamloops (OC PROD)
      - name: Wait for DC rollout of jag-cmsint-loader - Kamloops (OC PROD)
        env:
          appName: ${{github.event.inputs.app3}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch

      #Login to Openshift using OC SA and Token of respective env. for Pod labelling - Calgary (OC DR)
      - name: Authenticate OC Env Specific SA - Calgary (OC DR)
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_NAMESPACE: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
          OPENSHIFT_USER: ${{secrets.OPENSHIFT_SA_Env_DEPLOYER_NAME}}
        with:
          openshift_server_url: ${{secrets.OPENSHIFT_SERVER_URL_DR}}
          openshift_token: ${{secrets.OPENSHIFT_SA_ENV_DEPLOYER_TOKEN_DR}}
          namespace: ${OPENSHIFT_NAMESPACE}
        
      # Labels the deployment config of the application jag-cmsint-pac with release version number to spin up the pods labelled in same version - Calgary (OC DR)
      - name: Labelling DC of jag-cmsint-pac to release version - Calgary (OC DR)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app1}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'

      # Wait to DC rollout of jag-cmsint-pac-extractor to get completed before proceeding next stage - Calgary (OC DR)
      - name: Wait for DC rollout of jag-cmsint-pac-extractor - Calgary (OC DR)
        env:
          appName: ${{github.event.inputs.app1}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch

      # Labels the deployment config of the application jag-cmsint-pac-transformer with release version number to spin up the pods labelled in same version - Calgary (OC DR)
      - name: Labelling DC of jag-cmsint-pac-transformer to release version - Calgary (OC DR)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app2}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'

      # Wait to DC rollout of jag-cmsint-pac-transformer to get completed before proceeding next stage - Calgary (OC DR)
      - name: Wait for DC rollout of jag-cmsint-pac-transformer - Calgary (OC DR)
        env:
          appName: ${{github.event.inputs.app2}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
      
      # Labels the deployment config of the application jag-cmsint-pac-loader with release version number to spin up the pods labelled in same version - Calgary (OC DR)
      - name: Labelling DC of jag-cmsint-pac-loader to release version - Calgary (OC DR)
        env:
          releaseVersion: ${{ env.releaseVersion }}
          appName: ${{github.event.inputs.app3}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc patch dc ${appName} -n ${openshiftEnvNamespace} --patch '{"spec":{"template":{"metadata":{"labels":{"version":"${{ env.releaseVersion }}.${{ env.gitsha }}"}}}}}'

      # Wait to DC rollout of jag-cmsint-pac-loader to get completed before proceeding next stage - Calgary (OC DR)
      - name: Wait for DC rollout of jag-cmsint-pac-loader - Calgary (OC DR)
        env:
          appName: ${{github.event.inputs.app3}}
          openshiftEnvNamespace: ${{secrets.OPENSHIFT_LICENSE_PLATE}}-${{ github.event.inputs.env }}
        run: |
          oc rollout status -n ${openshiftEnvNamespace} dc/${appName} --watch
